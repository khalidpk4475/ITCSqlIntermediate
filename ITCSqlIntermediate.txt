SELECT * FROM tutorial.aapl_historical_stock_price

-- SQL Aggregate Functions
-- (Conunt Function)

SELECT COUNT(low) as Low
  FROM tutorial.aapl_historical_stock_price

 SELECT COUNT(date) as date, count(year) as year, count(month) as month, 
 count(open) as open, count(high) as high, count(low) as low, count(close) as close,
 count(volume) as volume, count(id) as id
  FROM tutorial.aapl_historical_stock_price 
  
  
  -- (Sum Function)
  select sum(open)/count(open) as "Average Opening Price"
    FROM tutorial.aapl_historical_stock_price
    
    
-- The SQL MIN and MAX functions
  select min(low) as "Lowest Price"
    FROM tutorial.aapl_historical_stock_price
    
  select max(close - open) as "Highest Single Day Increase"
    FROM tutorial.aapl_historical_stock_price
    
-- The SQL AVG function
  select avg(volume) as "Average Daily Stock"
    FROM tutorial.aapl_historical_stock_price
    
-- The SQL GROUP BY clause
SELECT sum(volume) as "Total Share", month as month
  FROM tutorial.aapl_historical_stock_price
  group by month
  order bavgonth
  
  SELECT avg(close - open) as "Average Price", year as year
  FROM tutorial.aapl_historical_stock_price
  group by year
  order by year
  
  SELECT min(low) as "Lowest Price", max(high) as "Highest Price", month as month
  FROM tutorial.aapl_historical_stock_price
  group by month
  order by month
  
-- The SQL HAVING clause
SELECT year,
       month,
       MAX(high) AS month_high
  FROM tutorial.aapl_historical_stock_price
 GROUP BY year, month
HAVING MAX(high) > 400
 ORDER BY year, month
 
-- The SQL CASE statement
select * FROM benn.college_football_players
where state ilike '%md%'
SELECT *,
       CASE WHEN year = 'SR' THEN 'yes'
            ELSE NULL END AS is_a_senior
  FROM benn.college_football_players
  
select *,
      case when state = 'CA' then 'yes' end as From_California
  FROM benn.college_football_players
  order by From_California
  
select player_name,
      case when height >= 75 then 'Hight is greater than 75' 
      when height >= 70 then 'Hight is between 70 and 74'
      when height >= 65 then 'Hight is between 65 and 69'
      else 'Height is less than 65'
      end as Hight
  FROM benn.college_football_players

SELECT *,
       CASE WHEN year = 'SR' or year = 'JR' THEN player_name
            ELSE NULL END AS Player_JR_SR
  FROM benn.college_football_players
 
   SELECT CASE WHEN state in ('CA', 'OR', 'WA') THEN 'West Cost'
   when state = 'TX' then 'Txas'
   else 'Others'
   END as Regional_Total,
            COUNT(1) AS count
  FROM benn.college_football_players
where weight >=300
 GROUP BY 1
 
   SELECT CASE WHEN year in ('FR', 'SO') THEN 'Underclass'
               when year in ('SR', 'JR') then 'Upperclass' END AS Player_class,
            sum(weight) AS Combined_weight
  FROM benn.college_football_players
  where state = 'CA'
 GROUP BY 1
 
 SELECT state, COUNT(CASE WHEN year = 'FR' THEN 1 ELSE NULL END) AS fr_count,
       COUNT(CASE WHEN year = 'SO' THEN 1 ELSE NULL END) AS so_count,
       COUNT(CASE WHEN year = 'JR' THEN 1 ELSE NULL END) AS jr_count,
       COUNT(CASE WHEN year = 'SR' THEN 1 ELSE NULL END) AS sr_count,
       SUM(CASE WHEN year in ('SR', 'JR', 'SO', 'FR') THEN 1 ELSE NULL END) AS Total
  FROM benn.college_football_players
  group by state
  order by Total Desc
  
  SELECT CASE WHEN school_name < 'n' THEN 'A-M'
            WHEN school_name >= 'n' THEN 'N-Z'
            ELSE NULL END AS school_name_group,
       COUNT(1) AS players
  FROM benn.college_football_players
 GROUP BY 1
 
 -- Using SQL DISTINCT for viewing unique values
 SELECT DISTINCT year
  FROM tutorial.aapl_historical_stock_price
  order by year
  
 SELECT count(DISTINCT month), year
  FROM tutorial.aapl_historical_stock_price
  group by year
  
 SELECT count(DISTINCT month) as Month_Count, count(distinct year) as Year_Count
  FROM tutorial.aapl_historical_stock_price

-- SQL Joins
SELECT players.school_name,
       players.player_name,
       players.position,
       players.weight
  FROM benn.college_football_players players
 WHERE players.state = 'GA'
 ORDER BY players.weight DESC
 
 -- INNER JOIN
SELECT players.player_name, players.school_name AS players_school_name,
  teams.conference AS teams_school_name
  FROM benn.college_football_players players
  JOIN benn.college_football_teams teams
    ON teams.school_name = players.school_name
  where teams.division =  'FBS (Division I-A Teams)'
    
-- SQL LEFT JOIN
SELECT count(companies.permalink) AS companies_count,
       count(acquisitions.company_permalink) AS acquisitions_count
  FROM tutorial.crunchbase_companies companies
  JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
SELECT count(companies.permalink) AS companies_count,
       count(acquisitions.company_permalink) AS acquisitions_count
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
    
SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS unique_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS unique_companies_acquired
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
 WHERE companies.state_code IS NOT NULL
 GROUP BY 1
 ORDER BY 3 DESC
 
-- SQL RIGHT JOIN
SELECT companies.state_code,
       COUNT(DISTINCT companies.permalink) AS unique_companies,
       COUNT(DISTINCT acquisitions.company_permalink) AS unique_companies_acquired
  FROM tutorial.crunchbase_companies companies
  RIGHT JOIN tutorial.crunchbase_acquisitions acquisitions
    ON companies.permalink = acquisitions.company_permalink
 WHERE companies.state_code IS NOT NULL
 GROUP BY 1
 ORDER BY 3 DESC
 
-- SQL Joins Using WHERE or ON
select * FROM tutorial.crunchbase_investments
select * FROM tutorial.crunchbase_companies

SELECT companies.name AS company_name,
       companies.status,
       COUNT(DISTINCT investments.investor_name) AS unqiue_investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 WHERE companies.state_code = 'NY'
 GROUP BY 1,2
 ORDER BY 3 DESC

SELECT CASE WHEN investments.investor_name IS NULL THEN 'No Investors'
            ELSE investments.investor_name END AS investor,
       COUNT(DISTINCT companies.permalink) AS companies_invested_in
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1
 ORDER BY 2 DESC
 
-- SQL FULL OUTER JOIN
    SELECT COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NULL
                      THEN companies.permalink ELSE NULL END) AS companies_only,
           COUNT(CASE WHEN companies.permalink IS NOT NULL AND investments.company_permalink IS NOT NULL
                      THEN companies.permalink ELSE NULL END) AS both_tables,
           COUNT(CASE WHEN companies.permalink IS NULL AND investments.company_permalink IS NOT NULL
                      THEN investments.company_permalink ELSE NULL END) AS investments_only
      FROM tutorial.crunchbase_companies companies
      FULL JOIN tutorial.crunchbase_investments_part1 investments
        ON companies.permalink = investments.company_permalink
        
-- SQL UNION
SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part1
 WHERE company_name ILIKE 'T%'
 
 UNION ALL

SELECT company_permalink,
       company_name,
       investor_name
  FROM tutorial.crunchbase_investments_part2
 WHERE company_name ILIKE 'M%'
 
SELECT 'investments_part1' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part1 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2

 UNION ALL
 
 SELECT 'investments_part2' AS dataset_name,
       companies.status,
       COUNT(DISTINCT investments.investor_permalink) AS investors
  FROM tutorial.crunchbase_companies companies
  LEFT JOIN tutorial.crunchbase_investments_part2 investments
    ON companies.permalink = investments.company_permalink
 GROUP BY 1,2